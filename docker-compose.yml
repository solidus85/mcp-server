version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: mcp-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mcp_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup_database.sql:/docker-entrypoint-initdb.d/01-setup.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  chroma:
    image: chromadb/chroma:latest
    container_name: mcp-chroma
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - mcp-network

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    depends_on:
      postgres:
        condition: service_healthy
      chroma:
        condition: service_started
    environment:
      # Database settings
      DATABASE_URL: postgresql+asyncpg://mcp_user:Detection3-Earthen-Zoom@postgres:5432/mcp_db
      
      # ChromaDB settings
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
      CHROMA_COLLECTION: mcp_vectors
      
      # API settings
      API_PREFIX: /api/v1
      API_RATE_LIMIT: 100
      API_RATE_LIMIT_PERIOD: 60
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      
      # LLM API keys (set these in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Server settings
      MCP_SERVER_HOST: 0.0.0.0
      MCP_SERVER_PORT: 8000
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FILE: /data/logs/mcp_server.log
      
      # Environment
      DEBUG: ${DEBUG:-false}
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data/logs:/data/logs
    networks:
      - mcp-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python scripts/check_db.py &&
        echo 'Running migrations...' &&
        python -m alembic upgrade head &&
        echo 'Starting server...' &&
        python -m uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --reload
      "

  # Optional: Development tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - mcp-network
    profiles:
      - dev

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    profiles:
      - cache

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  chroma_data:
  redis_data: